{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geopak","text":"<p>python package demo for geodpatial analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Tandoh004.github.io/geopak</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geopak.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geopak/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Tandoh004/geopak/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geopak could always use more documentation, whether as part of the official geopak docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Tandoh004/geopak/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geopak for local development.</p> <ol> <li> <p>Fork the geopak repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geopak.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geopak\n$ cd geopak/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geopak tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Tandoh004/geopak/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geopak/","title":"geopak module","text":"<p>Main module.</p>"},{"location":"geopak/#geopak.geopak.Map","title":"<code> Map            (Map)         </code>","text":"<p>_This ia a map class that is inherit from ipyleaflet.Map</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>_type_</code> <p>The ipyleaflet.Map class</p> required Source code in <code>geopak/geopak.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"_This ia a map class that is inherit from ipyleaflet.Map\n\n    Args:\n        ipyleaflet (_type_): The ipyleaflet.Map class\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize map\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        self.layers_control = ipyleaflet.LayersControl(position='topright')\n        self.add_control(self.layers_control)\n\n        self.toolbar = self.add_toolbar()\n        self.cord = self.add_latlon()\n\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"\n        Add a tile layer to the map.\n\n        Parameters:\n        - url: The URL of the tile layer.\n        - name: The name of the tile layer.\n        - **kwargs: Additional options for the tile layer.\n        \"\"\"\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_basemap(self, name):\n        \"\"\"\n        Add a basemap to the map.\n\n        Parameters:\n        - name: The name of the basemap. Should be a string or a basemap instance.\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n\n        else:\n            self.add(name)\n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"\n        Args:\n            data (_type_): Path to the geojson data (including .geojson extension)\n            name (str, optional): Name for the added Geojson data. Defaults to \"geojson\".\n        \"\"\"              \n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\":0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillcolor\": \"#ff0000\", \"fillOpacity\":0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs )\n        self.add(layer)\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Args:\n                data (str): Path to the shapefile (including .shp extension).\n                name (str, optional): Name for the added Shapefile data. Defaults to \"shp\".\n                **kwargs: Additional keyword arguments passed to the `add_geojson` method.\n\n         Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None     \n       \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Add a raster to the current map.\n\n        Args:\n            data (str or dict): Path to the raster as a string or a dictionary representation (including .Tif extension)\n            name (str, optional): Name for the added Raster data. Defaults to \"raster\".\n            zoom_to_layer (bool, optional): Whether to zoom to the added layer. Defaults to True.\n            **kwargs: Additional keyword arguments to pass to the underlying functions.\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package\")\n\n        client = TileClient(data)\n\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"adds an image overlay to the map.\n\n        Args:\n            url (str): the url of the image\n            bounds (list): the bounds of the image\n            name (str, optional): the name of the layer. Defaults to \"image\".\n        \"\"\"\n\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=\"image\", **kwargs)\n        self.add(layer)\n\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            button_style=\"success\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    widget = self.add_widget()\n\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n\n    def add_widget(self, basemaps=None, position='topright'):\n                \"\"\"_add widgets with basemaps , zoom slider to map\n\n                Args:\n                    basemaps (_type_, optional): _description_. Defaults to None.\n                    position (str, optional): _description_. Defaults to 'topright'.\n                \"\"\"\n\n                basemap_selector = widgets.Dropdown(\n                    options=[\n                        \"OpenTopoMap\",\n                        \"Gaode.Satellite\",\n                        \"Esri.WorldStreetMap\", \"Esri.WorldTopoMap\",\n                        \"Esri.WorldImagery\", \"Esri.NatGeoWorldMap\",\n                        \"CartoDB.Positron\", \"CartoDB.DarkMatter\",\n                        \"Strava.All\",\n                    ],\n                    description='Basemap'\n                )\n                basemap_selector.layout.width = \"250px\"\n\n                def update_basemap(change):\n                    self.add_basemap(change['new'])\n\n                basemap_selector.observe(update_basemap, 'value')\n\n                btn = widgets.Button(icon='map', button_style='primary')\n                btn.layout.width = \"28px\"\n\n                box = widgets.HBox([basemap_selector, btn])\n\n                zoom_slider = widgets.IntSlider(description='Zoom level:', min=0, max=15, value=2)\n                widgets.jslink((zoom_slider, 'value'), (self, 'zoom'))\n\n                item = [zoom_slider]\n\n                vbox = widgets.VBox(item)\n\n\n                # Define function to handle button click\n                def on_button_click(btn):\n                    if vbox in control.widget.children:\n                        control.widget.children = [box]\n                    else:\n                        control.widget.children = [box, vbox]\n\n                # Set button click behavior\n                btn.on_click(on_button_click)\n\n\n\n                control = WidgetControl(widget=widgets.VBox([box, vbox]), position=position)\n                self.add_control(control)\n\n\n\n    def add_opacity_slider(self, layer_index=0, description=\"Opacity\", position=\"bottomright\"):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n\n    def add_latlon (self, position=\"bottomleft\"):\n        \"\"\"Add coordinates to the map on a click\n\n        Args:\n            position (str, optional): Position of the coordinates. Defaults to \"bottomleft\".\n        \"\"\"\n\n        cord_output = widgets.Output(layout={\"border\": \"0.5px solid black\"})\n        output_control = WidgetControl(widget=cord_output, position=position)\n        self.add_control(output_control)\n\n\n        def handle_interaction(**kwargs):\n            latlon = kwargs.get(\"coordinates\")\n            latlon = [round(x, 5) for x in latlon]\n\n            if kwargs.get(\"type\") == \"click\":\n                with cord_output:\n                    cord_output.clear_output()\n                    print(\"{}\".format(latlon))\n\n        self.on_interaction(handle_interaction)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize map</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>geopak/geopak.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize map\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n\n    self.layers_control = ipyleaflet.LayersControl(position='topright')\n    self.add_control(self.layers_control)\n\n    self.toolbar = self.add_toolbar()\n    self.cord = self.add_latlon()\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Add a basemap to the map.</p> <ul> <li>name: The name of the basemap. Should be a string or a basemap instance.</li> </ul> Source code in <code>geopak/geopak.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Add a basemap to the map.\n\n    Parameters:\n    - name: The name of the basemap. Should be a string or a basemap instance.\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n\n    else:\n        self.add(name)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>Path to the geojson data (including .geojson extension)</p> required <code>name</code> <code>str</code> <p>Name for the added Geojson data. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"\n    Args:\n        data (_type_): Path to the geojson data (including .geojson extension)\n        name (str, optional): Name for the added Geojson data. Defaults to \"geojson\".\n    \"\"\"              \n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\":0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillcolor\": \"#ff0000\", \"fillOpacity\":0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs )\n    self.add(layer)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>the url of the image</p> required <code>bounds</code> <code>list</code> <p>the bounds of the image</p> required <code>name</code> <code>str</code> <p>the name of the layer. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"adds an image overlay to the map.\n\n    Args:\n        url (str): the url of the image\n        bounds (list): the bounds of the image\n        name (str, optional): the name of the layer. Defaults to \"image\".\n    \"\"\"\n\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=\"image\", **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_latlon","title":"<code>add_latlon(self, position='bottomleft')</code>","text":"<p>Add coordinates to the map on a click</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position of the coordinates. Defaults to \"bottomleft\".</p> <code>'bottomleft'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_latlon (self, position=\"bottomleft\"):\n    \"\"\"Add coordinates to the map on a click\n\n    Args:\n        position (str, optional): Position of the coordinates. Defaults to \"bottomleft\".\n    \"\"\"\n\n    cord_output = widgets.Output(layout={\"border\": \"0.5px solid black\"})\n    output_control = WidgetControl(widget=cord_output, position=position)\n    self.add_control(output_control)\n\n\n    def handle_interaction(**kwargs):\n        latlon = kwargs.get(\"coordinates\")\n        latlon = [round(x, 5) for x in latlon]\n\n        if kwargs.get(\"type\") == \"click\":\n            with cord_output:\n                cord_output.clear_output()\n                print(\"{}\".format(latlon))\n\n    self.on_interaction(handle_interaction)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=0, description='Opacity', position='bottomright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'bottomright'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_opacity_slider(self, layer_index=0, description=\"Opacity\", position=\"bottomright\"):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Add a raster to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>Path to the raster as a string or a dictionary representation (including .Tif extension)</p> required <code>name</code> <code>str</code> <p>Name for the added Raster data. Defaults to \"raster\".</p> <code>'raster'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the added layer. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the underlying functions.</p> <code>{}</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Add a raster to the current map.\n\n    Args:\n        data (str or dict): Path to the raster as a string or a dictionary representation (including .Tif extension)\n        name (str, optional): Name for the added Raster data. Defaults to \"raster\".\n        zoom_to_layer (bool, optional): Whether to zoom to the added layer. Defaults to True.\n        **kwargs: Additional keyword arguments to pass to the underlying functions.\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package\")\n\n    client = TileClient(data)\n\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile (including .shp extension).</p> required <code>name</code> <code>str</code> <p>Name for the added Shapefile data. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the <code>add_geojson</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None     </p> Source code in <code>geopak/geopak.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Args:\n            data (str): Path to the shapefile (including .shp extension).\n            name (str, optional): Name for the added Shapefile data. Defaults to \"shp\".\n            **kwargs: Additional keyword arguments passed to the `add_geojson` method.\n\n     Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None     \n   \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <ul> <li>url: The URL of the tile layer.</li> <li>name: The name of the tile layer.</li> <li>**kwargs: Additional options for the tile layer.</li> </ul> Source code in <code>geopak/geopak.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"\n    Add a tile layer to the map.\n\n    Parameters:\n    - url: The URL of the tile layer.\n    - name: The name of the tile layer.\n    - **kwargs: Additional options for the tile layer.\n    \"\"\"\n    layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        button_style=\"success\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                widget = self.add_widget()\n\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"geopak/#geopak.geopak.Map.add_widget","title":"<code>add_widget(self, basemaps=None, position='topright')</code>","text":"<p>_add widgets with basemaps , zoom slider to map</p> <p>Parameters:</p> Name Type Description Default <code>basemaps</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>position</code> <code>str</code> <p>description. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>geopak/geopak.py</code> <pre><code>def add_widget(self, basemaps=None, position='topright'):\n            \"\"\"_add widgets with basemaps , zoom slider to map\n\n            Args:\n                basemaps (_type_, optional): _description_. Defaults to None.\n                position (str, optional): _description_. Defaults to 'topright'.\n            \"\"\"\n\n            basemap_selector = widgets.Dropdown(\n                options=[\n                    \"OpenTopoMap\",\n                    \"Gaode.Satellite\",\n                    \"Esri.WorldStreetMap\", \"Esri.WorldTopoMap\",\n                    \"Esri.WorldImagery\", \"Esri.NatGeoWorldMap\",\n                    \"CartoDB.Positron\", \"CartoDB.DarkMatter\",\n                    \"Strava.All\",\n                ],\n                description='Basemap'\n            )\n            basemap_selector.layout.width = \"250px\"\n\n            def update_basemap(change):\n                self.add_basemap(change['new'])\n\n            basemap_selector.observe(update_basemap, 'value')\n\n            btn = widgets.Button(icon='map', button_style='primary')\n            btn.layout.width = \"28px\"\n\n            box = widgets.HBox([basemap_selector, btn])\n\n            zoom_slider = widgets.IntSlider(description='Zoom level:', min=0, max=15, value=2)\n            widgets.jslink((zoom_slider, 'value'), (self, 'zoom'))\n\n            item = [zoom_slider]\n\n            vbox = widgets.VBox(item)\n\n\n            # Define function to handle button click\n            def on_button_click(btn):\n                if vbox in control.widget.children:\n                    control.widget.children = [box]\n                else:\n                    control.widget.children = [box, vbox]\n\n            # Set button click behavior\n            btn.on_click(on_button_click)\n\n\n\n            control = WidgetControl(widget=widgets.VBox([box, vbox]), position=position)\n            self.add_control(control)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geopak, run this command in your terminal:</p> <pre><code>pip install geopak\n</code></pre> <p>This is the preferred method to install geopak, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geopak from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Tandoh004/geopak\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geopak in a project:</p> <pre><code>import geopak\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that contains utility functions for the geopak package</p>"},{"location":"utils/#geopak.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file  to a pandas Dataframe</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>_type_</code> <p>The path to the csv file.</p> required <p>References</p> <p>pandas.dataFrame: The pandas DataFrame</p> Source code in <code>geopak/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file  to a pandas Dataframe\n\n    Args:\n        csv_file (_type_): The path to the csv file.\n\n\n    References:\n        pandas.dataFrame: The pandas DataFrame\n    \"\"\"\n\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import geopak\n\nfrom geopak import utils\n\n#path=r\"C:\\Users\\ALBERT\\Documents\\geopak\\docs\\examples\\iris.csv\"\n#df =utils.csv_to_df(path)\n#df\n</pre> import geopak  from geopak import utils  #path=r\"C:\\Users\\ALBERT\\Documents\\geopak\\docs\\examples\\iris.csv\" #df =utils.csv_to_df(path) #df"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import geopak\nm=geopak.Map()\nm\n</pre>  import geopak m=geopak.Map() m Out[1]: In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[3]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[4]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[5]: Copied! <pre>\"\"\"def add_logo(self,position=\"bottomright\"):\n        output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\n        output_control = WidgetControl(widget=output_widget, position=position)\n        self.add_control(output_control)\n         \n        output_widget.clear_output()\n        logo = widgets.HTML(\n                value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n            )\n        with output_widget:\n\"\"\"\n</pre> \"\"\"def add_logo(self,position=\"bottomright\"):         output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})         output_control = WidgetControl(widget=output_widget, position=position)         self.add_control(output_control)                   output_widget.clear_output()         logo = widgets.HTML(                 value=''             )         with output_widget: \"\"\" Out[5]: <pre>'def add_logo(self,position=\"bottomright\"):\\n        output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\\n        output_control = WidgetControl(widget=output_widget, position=position)\\n        self.add_control(output_control)\\n         \\n        output_widget.clear_output()\\n        logo = widgets.HTML(\\n                value=\\'&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;\\'\\n            )\\n        with output_widget:\\n'</pre> In\u00a0[6]: Copied! <pre>color_picker = widgets.ColorPicker(description='Pick a color:', position = 'bottomright')\n</pre> color_picker = widgets.ColorPicker(description='Pick a color:', position = 'bottomright')"},{"location":"examples/sample/","title":"Sample","text":"In\u00a0[1]: Copied! <pre>print('Hello sample demo')\n</pre> print('Hello sample demo') <pre>Hello sample demo\n</pre>"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre>import geopak\n</pre> import geopak In\u00a0[2]: Copied! <pre>m = geopak.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m = geopak.Map() m.add_basemap(\"OpenTopoMap\") m Out[2]: In\u00a0[3]: Copied! <pre>#import geopak\n#m = geopak.Map()\n#data = \"n06_w003_1arc_v3.tif\"\n#m.add_raster(data, name=\"DEM\")\n#m\n</pre> #import geopak #m = geopak.Map() #data = \"n06_w003_1arc_v3.tif\" #m.add_raster(data, name=\"DEM\") #m In\u00a0[4]: Copied! <pre>#m.layers[-1].interact(opacity=(0.0,1.0))\n</pre> #m.layers[-1].interact(opacity=(0.0,1.0))"}]}